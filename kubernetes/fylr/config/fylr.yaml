## Our system environemnt allows us to overwrite the fylr.yml. All variables are read in
## upper-case. For the path to deeper variables, use "_" as separator. Supported
## types: string, []string. To fill []string, use a JSON array.
##
## Example:
## FYLR_DB_DSN="host=localhost port=5432 user=fylr dbname=test"
## FYLR_DB_DRIVER="postgres"
## FYLR_EXAMPLE_ARRAY='["a", "b", "c"]'
##
## Use --env-prefix on the command line to overwrite the FYLR_ default
fylr:
  # name of the instance (mandatory). Its used as prefix for the bucket
  # names and elastic indexes.
  name: fylr

  # public external url of the server. This url needs to be fully qualified
  externalURL: https://<external-url>

  # encryptionKey is used to AES-encrypt sensitive information before writing it
  # to the database. It must be 32 bytes long. Default is empty.
  #    openssl rand -hex 16
  encryptionKey: "98a653c43bcb6d86625b810cdf2a6ef9"

  logger:
    # Set to "json" or "console". Default: "console"
    format: "console"
    # Set zerolog log level: trace, debug, info, warn, error, fatal, panic
    # default to "info".
    level: "info"
    # timeFormat is the Go representation to format the time in the log output.
    # zerolog's time keeping resolution is always set to milliseconds by FYLR.
    # Use "", "UNIXMS" or "UNIXMICRO" to output a unix timestamp (json format only).
    # Defaults to ""
    timeFormat: "2006-01-02 15:04:05"
    # turn off color for zerolog's underlying ConsoleWriter
    # format: "console" only.
    noColor: true
    # add hostname to log output
    addHostname: true

  db:
    # https://golang.org/pkg/database/sql/#DB.SetMaxOpenConns, default: 0
    # This has to be at 4 + execserver.parallel + elastic.parallel. Two of these
    # connections will be dedicated to a separate connection pool managing
    # the sequences (Postgres only)
    maxOpenConns: 60
    # https://golang.org/pkg/database/sql/#DB.SetMaxIdleConns, default: 0
    # This has to be not more than maxOpenConns
    maxIdleConns: 10
    # The init block is used to pre-fill the database when its created or purged.
    init:
      # Path to base config file. If set, on a fresh install or after a purge this
      # file is used and preloaded into the base config. The format of the file is
      # JSON in API format. Defaults to "", which starts with an empty base
      # config. The empty base config uses defaults which are defined in
      # resources/baseconfig/baseconfig.yml. Unset keys (from a partial base
      # config file), are set to their defaults.
      configFile: ""
      # Inline base config. Works like configFile but used the inlined
      # baseconfig setting in this .yml file. Runs after configFile, so everything
      # in config overwrites settings from configFile. Default is empty.
      config:
        system:
          config:
            purge:
              allow_purge: true
              purge_storage: true
            email:
              from: no-reply@example.com
              server_addr: postfix-pfx-1.postfix.svc:25
            location_defaults:
              originals: s3
              versions: s3
              backups: localstorage
      # preconfigure locations for empty databases
      locations:
        # the location's name can be any string which you choose
        #
        # Inside the storage location fylr will create a structure like this:
        #
        # [prefix/]fylr-UUID/originals
        # [prefix/]fylr-UUID/versions
        # [prefix/]fylr-UUID/backups
        #
        # The driver "file" will create directories inside the configured
        # top level directory but never remove them. So, if you use purge
        # a lot, FYLR will leave empty directories on disk.
        localstorage:
          # The kind is either "file" or "s3" (see below)
          kind: file
          # Each location can configure a prefix which will
          # be attached before the file to be created
          prefix: "apitest/"
          # Set to true if files in this location can be
          # purged by FYLR (if the purge api call is used)
          allow_purge: true
          config:
            file:
              dir: "/mnt/backups/fylr"
        s3:
          kind: s3
          prefix: "apitest/"
          allow_purge: true
          config:
            s3:
              bucket: my-fylr-bucket
              endpoint: "s3.example.com:9000"
              accesskey: "access-key"
              secretkey: "secret-key"
              region: "us-east-1"
              ssl: false

  plugin:
    # load plugins at startup. the loader crawls the given directories
    # and loads given files for plugin config files, ending in ".yml".
    # "*" and "?" are allowed as placeholders, unmatched directories or
    # files are silently skipped.
    paths:
    - "/fylr/files/plugins/easydb"
    - "/fylr/files/plugins/fylr"
    # defaults is a map setting defaults for the plugin registration.
    # This is configured as map with the plugin name as key.
    defaults:
      # default for fylr_example plugin
      fylr_example:
        # enable, set to false to disable the plugin, defaults to true
        enabled: false
        # update_policy: automatic, always, never, defaults to automatic
        update: "never"

  # set to true to allow /api/settings/purge. should be disabled for production!
  allowpurge: true

  # path to resources, that are all files needed by FLYR during runtime (inspect, pages, etc..)
  # the default path is relative to the FLYR binary, not the current working directory
  resources: "/fylr/files/resources"

  elastic:
    # logger used for the elastic client
    # "Text": TextLogger prints the log message in plain text.
    # "Color": ColorLogger prints the log message in a terminal-optimized plain text.
    # "Curl": CurlLogger prints the log message as a runnable curl command.
    # "JSON": JSONLogger prints the log message as JSON.
    logger: ""
    # number of parallel workers to index documents, default to 1, set to 0 to disable
    parallel: 4
    # number of objects per job passed to the indexer process
    objectsPerJob: 1000
    # limit of payloads sent to Elastic
    maxMem: 150mb
    # fielddata (debug feature). if set to true, fields are mapped including their fielddata
    # in the reverse index. with that, the inspect view of the indexed version of
    # the object shows a per field list of stored terms. This can be useful for debugging
    # of analyzer settings.
    fielddata: false

  # Client configuration of execserver is used
  # for syncing of files, metadata generation and plugin execution
  execserver:
    # number of parallel file workers, default to 1, set to 0 to disable
    parallel: 4
    # pluginJobTimeoutSec sets the maximum seconds a callback
    # is allowed to run. Defaults to 30 seconds.
    pluginJobTimeoutSec: 240
    # connectTimeout sets the maximum seconds the server will wait
    # until a worker gets a job. Defaults to 60 seconds.
    connectTimeoutSec: 240
    # callbackBackendInternalURL will be included in execserver jobs, this is
    # used for plugin installation (loaded from the backend into the execserver)
    # and progress updates.
    callbackBackendInternalURL: "http://fylr-backend:8082"
    # callbackApiInternalURL will be presented to execserver plugin jobs. This
    # can be used by plugins to call back into the API.
    callbackApiInternalURL: "http://fylr-api:8081"

  services:
    # service "api" serves the API & oauth2
    api:
      # address of the api listener (with authentication)
      # if omitted, this server is not started
      addr: :8081
      # oauth2 server settings
      oauth2Server:
        # This secret is used to sign authorize codes, access and refresh
        # tokens. If unset, a random string is used. If multiple fylr server are
        # serving the same instance, the signingSecret needs to be configured.
        # The format is a 32-byte string.
        #    openssl rand -hex 16
        signingSecret: "d4b207ce131411ed8c7300155dd22658"
        # map with pre-configured client, use for the webapp
        clients:
          # client-id
          web-client:
            # clientSecret must be given as bcrypt hash
            clientSecret: $2y$12$3ULi66opx7/YjgDLmaKsQeoEJVtGSz6BTRUEqyPGK2SMRi0pNNwlO # foo
            # this must point to the public URL or the webapp
            # ending in /oauth2/callback
            redirectURL: https://<external-url>/oauth2/callback
            # the scopes this client needs to be granted
            # offline is mandatory to issue refresh tokens
            # others will be used in rights management
            scopes: ["read", "write", "offline"]

    backend:
      # address of the server listener
      # if omitted, this server is not started
      addr: :8082
      # configure inspect to provide the /inspect endpoint
      # this endpoint doesnt have authentication, so handle
      # with care.
      inspect:
        # backup: if configured /inspect can be used to backup / restore
        # instances. The backup storage is on disk.
        backup:
          # disk path to backup. each backup gets its own subdirectory
          path: /tmp/fylrctrl
          # path to the fylrctl utility which is used for backup and restore it is not
          # necessary to have the absolute paths here, if the running fylr binary can
          # find the program in its PATH.
          fylrctl: fylrctl
          # "psql" is needed to restore the DB format into a Postgres database
          psql: psql
          # "sqlite3" is needed to restore the DB format into an Sqlite database
          sqlite3: sqlite3

    # oauth2 client + web client
    webapp:
      # listener for the webapp
      addr: :8080
      # javascript files for the webapp
      path: /fylr/files/webfrontend
      # oauth2 client configuration to connect to
      # server. This must match the configuration above.
      oauth2:
        # clientID used to connect to oauth2 server
        clientID: web-client
        # clientSecret must be provided in clear
        clientSecret: foo
      # optional reverse proxy. redirect endpoint
      # /api and /inspect to target
      reverseProxy:
        api: "http://fylr-api:8081"
        backend: "http://fylr-backend:8082"
      # http basic auth for all access to the webfrontend (key=username, value=password)
      basicAuth:
        root: 0568ba06146148918f9ed6f8fcb44904